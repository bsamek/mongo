stepback: false
command_type: system

post:
    - command: attach.results
      params:
        file_location: work/report.json

functions:
  "prepare environment":
    - command: shell.exec
      params:
        script: |
          rm -rf ./*
          mkdir src
          mkdir work
    - command: manifest.load
    - command: git.get_project
      params:
        directory: src
        revisions: # for each module include revision as <module_name> : ${<module_name>_rev}
          dsi: ${dsi_rev}
          workloads: ${workloads_rev}
    - command: shell.exec
      params:
        working_dir: work
        script: |
          cat > bootstrap.yml <<EOF
          cluster_type: ${cluster}
          platform: ${platform}
          setup: ${setup}
          storageEngine: ${storageEngine}
          test: ${test}
          production: true
          EOF

          cat > runtime.yml <<EOF
          # evergreen default expansions
          is_patch: ${is_patch}
          task_id: ${task_id}
          task_name: ${task_name}
          execution: ${execution}
          build_id: ${build_id}
          build_variant: ${build_variant}
          version_id: ${version_id}
          workdir: ${workdir}
          revision: ${revision}
          project: ${project}
          branch_name: ${branch_name}

          # sys-perf expansions
          # Shouldn't be needed: testList: ${testList}
          ext: ${ext}
          script_flags : ${script_flags}
          dsi_rev: ${dsi_rev}
          compare_task: ${compare_task}
          workloads_rev: ${workloads_rev}

          # compositions of expansions
          mongodb_binary_archive: "https://s3.amazonaws.com/mciuploads/${project}/${version_id}/${revision}/${platform}/mongod-${version_id}.tar.gz"
          EOF
    - command: shell.exec
      params:
        silent: true
        working_dir: work
        script: |
          # AWS ssh secret key
          echo "${ec2_pem}" > aws_ssh_key.pem
          chmod 400 aws_ssh_key.pem

          cat > runtime_secret.yml <<EOF
          # Note that inside system_perf.yml we have ${aws_key} & ${aws_secret}, which are used for
          # Evergreen resources. The below are used for dsi resources, and are NOT the same!
          aws_access_key: "${terraform_key}"
          aws_secret_key: "${terraform_secret}"
          perf_jira_user: "${perf_jira_user}"
          perf_jira_pw: "${perf_jira_pw}"
          EOF
          chmod 400 runtime_secret.yml
    - command: shell.exec
      params:
        working_dir: work
        # setup execution environment
        # configure environment, has private information, no logging
        script: |
          set -e
          virtualenv ./venv
          source ./venv/bin/activate
          pip install -r ../src/dsi/dsi/requirements.txt
          python ../src/dsi/dsi/bin/bootstrap.py --production
          ls
          pwd
    - command: shell.exec
      params:
        script: |
          set -v
          set -e
          source work/dsienv.sh
          $DSI_PATH/bin/setup-dsi-env.sh
          ls -a work

  "infrastructure provisioning":
    - command: shell.exec
      # call infrastructure-provisioning.py. This will either create a cluster, or update tags on existing instances.
      params:
        working_dir: work
        script: |
          set -e
          set -v
          source ./dsienv.sh
          source ./venv/bin/activate
          $DSI_PATH/bin/infrastructure_provisioning.py

  "configure mongodb cluster":
    - command: shell.exec
      # bring up the mongod
      params:
        working_dir: work
        script: |
          set -e
          set -o verbose
          source ./dsienv.sh
          source ./venv/bin/activate
          $DSI_PATH/bin/mongodb_setup.py && echo "${setup} MongoDB Cluster STARTED."

  "run test":
    - command: shell.exec
      params:
        working_dir: work
        script: |
          set -e
          set -v
          source ./dsienv.sh
          source ./venv/bin/activate
          echo "Run test for ${test}-${storageEngine} with setup ${setup}"
          $DSI_PATH/bin/run_test.py ${storageEngine} ${test} ${cluster}
    - command: "json.send"
      params:
         name: "perf"
         file: "work/perf.json"

  "make test log artifact":
    - command: shell.exec
      params:
        working_dir: work
        script: |
          source ./dsienv.sh
          $DSI_PATH/bin/make_artifact.sh

  "analyze":
    - command: json.get_history
      params:
        task: ${task_name}
        file: "work/history.json"
        name: "perf"
    - command: json.get_history
      params:
        tags: true
        task: ${task_name}
        file: "work/tags.json"
        name: "perf"
    - command: shell.exec
      # generate dashboard data
      type : test
      params:
        working_dir: work
        silent: true
        script: |
          set -o errexit
          TAGS="3.4.6-Baseline 3.2.15-Baseline"
          OVERRIDEFILE="../src/dsi/dsi/analysis/master/system_perf_override.json"
          python -u ../src/dsi/dsi/analysis/dashboard_gen.py --rev ${revision} -f history.json -t tags.json --refTag $TAGS --overrideFile $OVERRIDEFILE --project_id sys-perf --variant ${build_variant} --task ${task_name} --jira-user ${perf_jira_user} --jira-password ${perf_jira_pw} || true
    - command: "json.send"
      params:
         name: "dashboard"
         file: "work/dashboard.json"
    - command: shell.exec
      # post_run_check.py and override.json for DSI tests are part of dsi repo
      type : test
      params:
        working_dir: work
        script: |
          set -o errexit
          set -o verbose
          TAG="3.4.6-Baseline"
          OVERRIDEFILE="../src/dsi/dsi/analysis/master/system_perf_override.json"
          python -u ../src/dsi/dsi/analysis/post_run_check.py ${script_flags} --reports-analysis reports --perf-file reports/perf.json --rev ${revision} -f history.json -t tags.json --refTag $TAG --overrideFile $OVERRIDEFILE --project_id sys-perf --variant ${build_variant} --task ${task_name}

  "compare":
    - command: shell.exec
      params:
        script: |
          set -o verbose
          rm -rf ./src ./work
          mkdir src
          mkdir work
    - command: manifest.load
    - command: git.get_project
      params:
        directory: src
        revisions: # for each module include revision as <module_name> : ${<module_name>_rev}
          dsi: ${dsi_rev}
    - command: json.get
      params:
        task: ${compare_task}
        variant : ${variant1}
        file: "work/standalone.json"
        name: "perf"
    - command: json.get
      params:
        task: ${compare_task}
        variant : ${variant2}
        file: "work/oplog.json"
        name: "perf"
    - command: shell.exec
      type : test
      params:
        working_dir: work
        script: |
          set -o errexit
          set -o verbose
          python -u ../src/dsi/dsi/analysis/compare.py -b standalone.json -c oplog.json
    - command: "json.send"
      params:
        name: "perf"
        file: "work/perf.json"

#######################################
#               Tasks                 #
#######################################

tasks:
- name: compile
  commands:
    - command: manifest.load
    - command: git.get_project
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          # We get the raw version string (r1.2.3-45-gabcdef) from git
          MONGO_VERSION=$(git describe)
          # If this is a patch build, we add the patch version id to the version string so we know
          # this build was a patch, and which evergreen task it came from
          if [ "${is_patch|}" = "true" ]; then
            MONGO_VERSION="$MONGO_VERSION-patch-${version_id}"
          fi

          # This script converts the generated version string into a sanitized version string for
          # use by scons and uploading artifacts as well as information about for the scons cache.
          MONGO_VERSION=$MONGO_VERSION USE_SCONS_CACHE=${use_scons_cache|false} ${python|/opt/mongodbtoolchain/v2/bin/python2} buildscripts/generate_compile_expansions.py --out compile_expansions.yml
    # Then we load the generated version data into the agent so we can use it in task definitions
    - command: expansions.update
      params:
        file: src/compile_expansions.yml
    - command: shell.exec
      params:
        working_dir: src/src/mongo/gotools
        script: |
          set -o verbose
          set -o errexit
          # make sure newlines in the scripts are handled correctly by windows
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          sed -i.bak "s/built-without-version-string/$(git describe)/" common/options/options.go
          sed -i.bak "s/built-without-git-spec/$(git rev-parse HEAD)/" common/options/options.go
          . ./${set_tools_gopath|set_gopath.sh}
          build_tools="bsondump mongostat mongofiles mongoexport mongoimport mongorestore mongodump mongotop mongooplog"
          if [ "${build_mongoreplay}" = "true" ]; then
            build_tools="$build_tools mongoreplay"
          fi
          for i in $build_tools; do
            ${gorootvars} go build ${tooltags|} -o "../../mongo-tools/$i${exe|}" $i/main/$i.go
            "../../mongo-tools/$i${exe|}" --version
          done
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          ${python|/opt/mongodbtoolchain/v2/bin/python2} ./buildscripts/scons.py ${compile_flags|} ${scons_cache_args|} mongo${extension} --use-new-tools mongod${extension} mongos${extension} MONGO_VERSION=${version}
          mkdir -p mongodb/bin
          mkdir -p mongodb/jstests/hooks
          mv mongo${extension|} mongodb/bin
          mv mongod${extension|} mongodb/bin
          mv mongos${extension|} mongodb/bin
          mv src/mongo-tools/* mongodb/bin
          if [ -d jstests/hooks ]
          then
            echo "Fetching JS test DB correctness checks from directory jstests/hooks"
            cp -a jstests/hooks/* mongodb/jstests/hooks
          fi
          tar cvf mongodb.tar mongodb
          gzip mongodb.tar

- name: industry_benchmarks_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "ycsb"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "ycsb"
    - func: "make test log artifact"
    - func: "analyze"
      vars:
        script_flags: --ycsb-throughput-analysis reports

- name: industry_benchmarks_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "ycsb"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "ycsb"
    - func: "make test log artifact"
    - func: "analyze"
      vars:
        script_flags: --ycsb-throughput-analysis reports

- name: core_workloads_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "core"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "core"
    - func: "make test log artifact"
    - func: "analyze"

- name: core_workloads_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "core"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "core"
    - func: "make test log artifact"
    - func: "analyze"

- name: agg_query_comparison_bestbuy_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "agg_query_comparison_bestbuy"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "agg_query_comparison_bestbuy"
    - func: "make test log artifact"
    - func: "analyze"

- name: agg_query_comparison_bestbuy_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "agg_query_comparison_bestbuy"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "agg_query_comparison_bestbuy"
    - func: "make test log artifact"
    - func: "analyze"

- name: non_sharded_workloads_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "non_sharded"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "non_sharded"
    - func: "make test log artifact"
    - func: "analyze"

- name: non_sharded_workloads_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "non_sharded"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "non_sharded"
    - func: "make test log artifact"
    - func: "analyze"

- name: mongos_workloads_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "mongos"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "mongos"
    - func: "make test log artifact"
    - func: "analyze"

- name: mongos_workloads_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  exec_timeout_secs: 32400 # 9 hours
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "mongos"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "mongos"
    - func: "make test log artifact"
    - func: "analyze"

- name: move_chunk_workloads_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "move_chunk"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "move_chunk"
    - func: "make test log artifact"
    - func: "analyze"

- name: move_chunk_workloads_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "move_chunk"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "move_chunk"
    - func: "make test log artifact"
    - func: "analyze"

- name: secondary_performance_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "secondary_performance"
        setup: "replica-2node"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
        setup: "replica-2node"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "secondary_performance"
    - func: "make test log artifact"
    - func: "analyze"

- name: secondary_performance_MMAPv1
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "secondary_performance"
        setup: "replica-2node"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
        setup: "replica-2node"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "secondary_performance"
    - func: "make test log artifact"
    - func: "analyze"

- name: initialsync_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "initialSync"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "initialSync"
    - func: "make test log artifact"
    - func: "analyze"

- name: initialsync_MMAPv1
  depends_on:
    - name: compile
      variant : linux-standalone
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "mmapv1"
        test: "initialSync"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "mmapv1"
    - func: "run test"
      vars:
        storageEngine: "mmapv1"
        test: "initialSync"
    - func: "make test log artifact"
    - func: "analyze"

- name: initialsync-logkeeper_WT
  depends_on:
    - name: compile
      variant: linux-standalone
  exec_timeout_secs: 216000 # 2.5 days
  commands:
    - func: "prepare environment"
      vars:
        storageEngine: "wiredTiger"
        test: "initialsync-logkeeper"
    - func: "infrastructure provisioning"
    - func: "configure mongodb cluster"
      vars:
        storageEngine: "wiredTiger"
    - func: "run test"
      vars:
        storageEngine: "wiredTiger"
        test: "initialsync-logkeeper"
    - func: "make test log artifact"
    - func: "analyze"


#######################################
#               Modules               #
#######################################
# if a module is added and to be added to the manifest
# be sure to add the module to git.get_project revisions parameter
modules:
- name: dsi
  repo: git@github.com:10gen/dsi.git
  prefix: dsi
  branch: master

- name: workloads
  repo: git@github.com:10gen/workloads.git
  prefix: workloads
  branch: master


#######################################
#         Linux Buildvariants         #
#######################################
buildvariants:
- name: linux-standalone
  display_name: Linux Standalone
  batchtime: 1440 # 24 hours
  modules:
    - dsi
    - workloads
  expansions:
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) CC=/opt/mongodbtoolchain/v2/bin/gcc CXX=/opt/mongodbtoolchain/v2/bin/g++ OBJCOPY=/opt/mongodbtoolchain/v2/bin/objcopy
    setup: standalone
    cluster: single
    platform: linux
    use_scons_cache: true
    gorootvars: GOROOT=/opt/go PATH="/opt/go/bin:$PATH"
    tooltags: ""
    project: dsi
  run_on:
      - "rhel70-perf-single"
  tasks:
    - name: compile
      distros:
      - rhel70
    - name: industry_benchmarks_WT
    - name: core_workloads_WT
    - name: industry_benchmarks_MMAPv1
    - name: core_workloads_MMAPv1
    - name: non_sharded_workloads_WT
    - name: non_sharded_workloads_MMAPv1
    - name: agg_query_comparison_bestbuy_WT
    - name: agg_query_comparison_bestbuy_MMAPv1
